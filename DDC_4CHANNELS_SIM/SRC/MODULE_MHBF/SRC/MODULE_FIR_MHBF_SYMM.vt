// Copyright (C) 1991-2014 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "04/10/2018 23:17:14"
                                                                                
// Verilog Test Bench template for design : MODULE_FIR_MHBF_ASYM
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module MODULE_FIR_MHBF_SYMM_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg CLK;
reg [23:0] Data_Config;
reg signed [23:0] rData_In;
reg signed [23:0] Data_In;
reg Data_In_Valid;
reg isConfig;
reg nRST;
// wires                                               
wire signed [23:0]  Data_Out;
wire Data_Out_Valid;
wire isConfigACK;
wire isConfigDone;

reg isConfigDone_reg;

// assign statements (if any)                          
MODULE_FIR_MHBF_SYMM i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.Data_Config(Data_Config),
	.Data_In(Data_In),
	.Data_In_Valid(Data_In_Valid),
	.Data_Out(Data_Out),
	.Data_Out_Valid(Data_Out_Valid),
	.isConfig(isConfig),
	.isConfigACK(isConfigACK),
	.isConfigDone(isConfigDone),
	.nRST(nRST)
);

parameter  clk_period      		= 10;                        		// clk frequency: 5MHz;
parameter  clk_half_period 	 	= clk_period / 2;  
parameter  clk_period_1M 		= clk_period * 5;     
parameter  clk_half_period_1M   = clk_half_period * 5;
parameter  data_num   	   		= 10000;                      		// simulate data length;
parameter  time_sim 	   		= data_num * clk_half_period * 20; 	// simulate time;
parameter  clk_period_data_in_valid_low = clk_period * 22;
parameter  initial_config_time  = 3000;
////////////////////////////////////////////////////////////////////
/// 
parameter FILTER_MAX_ORDER  =  32;

wire signed [23:0] coef[(FILTER_MAX_ORDER+2)*5:0];
wire signed [23:0] coef2[(FILTER_MAX_ORDER+2)*5:0];

assign coef[0] = 24'b000000000000000000000000;
assign coef[1] = 24'b111111111111111111111001;
assign coef[2] = 24'b000000000000000000000000;
assign coef[3] = 24'b111111111111111111111001;
assign coef[4] = 24'b000000000000000000000000;
assign coef[5] = 24'b111111111111111111111001;
assign coef[6] = 24'b000000000000000000000000;
assign coef[7] = 24'b111111111111111111111001;
assign coef[8] = 24'b000000000000000000000000;
assign coef[9] = 24'b111111111111111111111001;
assign coef[10] = 24'b000000000000000000000000;
assign coef[11] = 24'b111111111111111111111001;
assign coef[12] = 24'b000000000000000000000000;
assign coef[13] = 24'b111111111111111111111001;
assign coef[14] = 24'b000000000000000000000000;
assign coef[15] = 24'b010000000000000000110001;
assign coef[16] = 24'b011111111111111111111111;
assign coef[17] = 24'b010000000000000000110001;
assign coef[18] = 24'b000000000000000000000000;
assign coef[19] = 24'b111111111111111111111001;
assign coef[20] = 24'b000000000000000000000000;
assign coef[21] = 24'b111111111111111111111001;
assign coef[22] = 24'b000000000000000000000000;
assign coef[23] = 24'b111111111111111111111001;
assign coef[24] = 24'b000000000000000000000000;
assign coef[25] = 24'b111111111111111111111001;
assign coef[26] = 24'b000000000000000000000000;
assign coef[27] = 24'b111111111111111111111001;
assign coef[28] = 24'b000000000000000000000000;
assign coef[29] = 24'b111111111111111111111001;
assign coef[30] = 24'b000000000000000000000000;
assign coef[31] = 24'b111111111111111111111001;
assign coef[32] = 24'b000000000000000000000000;
assign coef[33] = 24'b000000000000000000000111;
assign coef[34] = 24'b000000000000000000000000;
assign coef[35] = 24'b111111111111111111101001;
assign coef[36] = 24'b000000000000000000000000;
assign coef[37] = 24'b111111111111111111101001;
assign coef[38] = 24'b000000000000000000000000;
assign coef[39] = 24'b111111111111111111101001;
assign coef[40] = 24'b000000000000000000000000;
assign coef[41] = 24'b111111111111111111101001;
assign coef[42] = 24'b000000000000000000000000;
assign coef[43] = 24'b111111111111111111101001;
assign coef[44] = 24'b000000000000000000000000;
assign coef[45] = 24'b111111111111111111101001;
assign coef[46] = 24'b000000000000000000000000;
assign coef[47] = 24'b111111111111111111101001;
assign coef[48] = 24'b000000000000000000000000;
assign coef[49] = 24'b010000000000000010100011;
assign coef[50] = 24'b011111111111111111111111;
assign coef[51] = 24'b010000000000000010100011;
assign coef[52] = 24'b000000000000000000000000;
assign coef[53] = 24'b111111111111111111101001;
assign coef[54] = 24'b000000000000000000000000;
assign coef[55] = 24'b111111111111111111101001;
assign coef[56] = 24'b000000000000000000000000;
assign coef[57] = 24'b111111111111111111101001;
assign coef[58] = 24'b000000000000000000000000;
assign coef[59] = 24'b111111111111111111101001;
assign coef[60] = 24'b000000000000000000000000;
assign coef[61] = 24'b111111111111111111101001;
assign coef[62] = 24'b000000000000000000000000;
assign coef[63] = 24'b111111111111111111101001;
assign coef[64] = 24'b000000000000000000000000;
assign coef[65] = 24'b111111111111111111101001;
assign coef[66] = 24'b000000000000000000000000;
assign coef[67] = 24'b000000000000000000000110;
assign coef[68] = 24'b000000000000000000000000;
assign coef[69] = 24'b111111111111101111100111;
assign coef[70] = 24'b000000000000000000000000;
assign coef[71] = 24'b111111111111101111011001;
assign coef[72] = 24'b000000000000000000000000;
assign coef[73] = 24'b111111111111101111000001;
assign coef[74] = 24'b000000000000000000000000;
assign coef[75] = 24'b111111111111101110011110;
assign coef[76] = 24'b000000000000000000000000;
assign coef[77] = 24'b111111111111101101101110;
assign coef[78] = 24'b000000000000000000000000;
assign coef[79] = 24'b111111111111101100101111;
assign coef[80] = 24'b000000000000000000000000;
assign coef[81] = 24'b111111111111101011100000;
assign coef[82] = 24'b000000000000000000000000;
assign coef[83] = 24'b010000000010101011110111;
assign coef[84] = 24'b011111111111111111111111;
assign coef[85] = 24'b010000000010101011110111;
assign coef[86] = 24'b000000000000000000000000;
assign coef[87] = 24'b111111111111101011100000;
assign coef[88] = 24'b000000000000000000000000;
assign coef[89] = 24'b111111111111101100101111;
assign coef[90] = 24'b000000000000000000000000;
assign coef[91] = 24'b111111111111101101101110;
assign coef[92] = 24'b000000000000000000000000;
assign coef[93] = 24'b111111111111101110011110;
assign coef[94] = 24'b000000000000000000000000;
assign coef[95] = 24'b111111111111101111000001;
assign coef[96] = 24'b000000000000000000000000;
assign coef[97] = 24'b111111111111101111011001;
assign coef[98] = 24'b000000000000000000000000;
assign coef[99] = 24'b111111111111101111100111;
assign coef[100] = 24'b000000000000000000000000;
assign coef[101] = 24'b000000000000000000000110;
assign coef[102] = 24'b000000000000000000000000;
assign coef[103] = 24'b111111111111111111111100;
assign coef[104] = 24'b000000000000000000000000;
assign coef[105] = 24'b111111111111111111111010;
assign coef[106] = 24'b000000000000000000000000;
assign coef[107] = 24'b111111111111111111110110;
assign coef[108] = 24'b000000000000000000000000;
assign coef[109] = 24'b111111111111111111110010;
assign coef[110] = 24'b000000000000000000000000;
assign coef[111] = 24'b111111111111111111101101;
assign coef[112] = 24'b000000000000000000000000;
assign coef[113] = 24'b111111111111111111101000;
assign coef[114] = 24'b000000000000000000000000;
assign coef[115] = 24'b111111111111111111100011;
assign coef[116] = 24'b000000000000000000000000;
assign coef[117] = 24'b010000000000000001101110;
assign coef[118] = 24'b011111111111111111111111;
assign coef[119] = 24'b010000000000000001101110;
assign coef[120] = 24'b000000000000000000000000;
assign coef[121] = 24'b111111111111111111100011;
assign coef[122] = 24'b000000000000000000000000;
assign coef[123] = 24'b111111111111111111101000;
assign coef[124] = 24'b000000000000000000000000;
assign coef[125] = 24'b111111111111111111101101;
assign coef[126] = 24'b000000000000000000000000;
assign coef[127] = 24'b111111111111111111110010;
assign coef[128] = 24'b000000000000000000000000;
assign coef[129] = 24'b111111111111111111110110;
assign coef[130] = 24'b000000000000000000000000;
assign coef[131] = 24'b111111111111111111111010;
assign coef[132] = 24'b000000000000000000000000;
assign coef[133] = 24'b111111111111111111111100;
assign coef[134] = 24'b000000000000000000000000;
assign coef[135] = 24'b000000000000000000000110;
assign coef[136] = 24'b000000000000000000000000;
assign coef[137] = 24'b111111111111111110101111;
assign coef[138] = 24'b000000000000000000000000;
assign coef[139] = 24'b000000000000010011110001;
assign coef[140] = 24'b000000000000000000000000;
assign coef[141] = 24'b111111111101101010010010;
assign coef[142] = 24'b000000000000000000000000;
assign coef[143] = 24'b000000001011100000101011;
assign coef[144] = 24'b000000000000000000000000;
assign coef[145] = 24'b111111010110001000010011;
assign coef[146] = 24'b000000000000000000000000;
assign coef[147] = 24'b000001111011011011110011;
assign coef[148] = 24'b000000000000000000000000;
assign coef[149] = 24'b111010110010111110000000;
assign coef[150] = 24'b000000000000000000000000;
assign coef[151] = 24'b010011110010000000011011;
assign coef[152] = 24'b011111111111111111111111;
assign coef[153] = 24'b010011110010000000011011;
assign coef[154] = 24'b000000000000000000000000;
assign coef[155] = 24'b111010110010111110000000;
assign coef[156] = 24'b000000000000000000000000;
assign coef[157] = 24'b000001111011011011110011;
assign coef[158] = 24'b000000000000000000000000;
assign coef[159] = 24'b111111010110001000010011;
assign coef[160] = 24'b000000000000000000000000;
assign coef[161] = 24'b000000001011100000101011;
assign coef[162] = 24'b000000000000000000000000;
assign coef[163] = 24'b111111111101101010010010;
assign coef[164] = 24'b000000000000000000000000;
assign coef[165] = 24'b000000000000010011110001;
assign coef[166] = 24'b000000000000000000000000;
assign coef[167] = 24'b111111111111111110101111;
assign coef[168] = 24'b000000000000000000000000;
assign coef[169] = 24'b000000000000000000000110;
assign coef[170] = 24'b000000000000000000011111;


initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
  //MHBF_CTL = {{(NMHBF_MAX-1){1'b0}}, 1'b1};
	//MHBF_CTL_idx = 4'd0;
	isConfig = 1'b0;
    CLK  = 1;
	nRST = 0;
	Data_In = 24'd0;
	rData_In = 24'd0;
	
	#500 nRST = 1;
	#time_sim  $finish;
	rData_In = 24'd0;
	Data_In = 24'd0;                                                
// --> end                                             
$display("Running testbench");                       
end             

//// generate clk
always 
begin
	#clk_half_period CLK = ~CLK;
end

// reg [1:0] data_valid_cnt;
 reg [2:0]state_idx_reg;
 
//// read test data from file;
integer Pattern;
reg [23:0] stimulus[1:data_num];

initial 
begin
	// file must be putted in dir： $proc\simulation\modelsim\
	
	$readmemb("S_bin.txt", stimulus);
	Pattern = 0;
	
	# initial_config_time;
	repeat(data_num)
		begin
			Pattern = Pattern + 1;
			Data_In = stimulus[Pattern];
			Data_In_Valid <= 1;
			#clk_period;
			Data_In_Valid <= 0;
			#clk_period_data_in_valid_low;
		end
end

//// write output d_out to file: simDataOut.txt;
integer file_out;

initial 
begin
	//the file in the dir: proc\simulation\modelsim\
	
	file_out = $fopen("simDataOut.txt");
	if(!file_out)
	begin
		$display("could not open ouput file!");
		$finish;
	end
end	



reg isConfig_reg;
reg [9:0] data_in_idx_reg;


reg isSecondConfig;
reg [7:0]state_idx_reg2;
reg [7:0]idx_config_cnt_reg;

initial 
begin
	data_in_idx_reg <= 10'd0;
	idx_config_cnt_reg <= 8'd0;
	isConfigDone_reg = 1'b0;
	state_idx_reg <= 3'd0;
	state_idx_reg2 <= 8'd0;
	isConfig_reg <= 1'b0;
	// CIC_Config_Data_reg[0] = 16'b0000000000111111;
	// CIC_Config_Data_reg[1] = 16'd3;
	#600 	 isConfig_reg 	<= 1'b1;
	//#150000  isSecondConfig <= 1'b1;

end




always @(posedge CLK)
begin
	case (state_idx_reg)
		3'd0:
			begin
				if (isConfig_reg)
					begin
						isConfig <= 1'b1;
						state_idx_reg <= state_idx_reg + 3'd1;
					end
			end
		3'd1:
			if (idx_config_cnt_reg == 8'd171)
				begin
					isConfig_reg <= 1'b0;
					idx_config_cnt_reg <= 8'd0;
					state_idx_reg <= state_idx_reg + 1;
				end
			else
				begin
					isConfig <= 1'b0;
					Data_Config <= coef[idx_config_cnt_reg];
					idx_config_cnt_reg <= idx_config_cnt_reg + 1;
				end
		3'd2:
			begin	
				// NULL NORMAL WORK;
			end
		default:
			begin
				// NULL
				state_idx_reg <= 3'd0;
			end
	endcase
end

always @(posedge Data_Out_Valid)
		$fdisplay(file_out, "%8d", Data_Out);
                                
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
                                                       
@eachvec;                                              
// --> end                                             
end                                                    
endmodule

