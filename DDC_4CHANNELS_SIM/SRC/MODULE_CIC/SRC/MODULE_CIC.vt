// Copyright (C) 1991-2014 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "04/14/2018 02:02:46"
                                                                                
// Verilog Test Bench template for design : MODULE_CIC
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module MODULE_CIC_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;

/////////////////////////////////////////////////////////////////////
//// CIC Simulation Parameters
parameter  clk_period      		= 200;                        		// clk frequency: 5MHz;
parameter  clk_half_period 	 	= clk_period / 2;  
parameter  clk_quarter  		= clk_period / 4;
parameter  clk_period_1M 		= clk_period * 5;     
parameter  clk_half_period_1M   = clk_half_period * 5;
parameter  data_num   	   		= 5000;       

parameter  init_config_time     = 3000;               		// simulate data length;
parameter  time_sim 	   		= (data_num * clk_half_period) + init_config_time; 	// simulate time;



/////////////////////////////////////////////////////////////////////
//// CIC Config Parameters
parameter INPUT_WIDTH   		=  16;
parameter MIDDLE_WIDTH  		=  37;
parameter OUTPUT_WIDTH  		=  24;
parameter CIC_MAX_DCEF 			=  16;
parameter CIC_MAX_DIFFD  		=  1;
parameter CIC_MAX_NUMSECS		=  16;
parameter CIC_CONFIG_DATA_WIDTH =  16;
//////////////////////////////////////////////////////////////////////////////
wire [15:0]coef[2:0];

assign coef[0] = 16'b0000000000000111;
assign coef[1] = 16'b0000000000001000;
assign coef[2] = 16'b0000000000001100;


// test vector input registers
reg CLK;
reg [15:0] Data_Config_In;
reg signed [15:0] Data_In;
reg Data_In_Valid;
reg isConfig;
reg nRST;
// wires                                               
wire signed [23:0]  Data_Out;
wire Data_Out_Valid;
wire isConfigACK;
wire isConfigDone;


// assign statements (if any)                          
MODULE_CIC i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.Data_Config_In(Data_Config_In),
	.Data_In(Data_In),
	.Data_In_Valid(Data_In_Valid),
	.Data_Out(Data_Out),
	.Data_Out_Valid(Data_Out_Valid),
	.isConfig(isConfig),
	.isConfigACK(isConfigACK),
	.isConfigDone(isConfigDone),
	.nRST(nRST)
);

initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
	CLK  = 1;
	nRST = 0;
	Data_Config_In = {16{1'b0}};
	
	#500 nRST = 1;
	#time_sim $finish;
	Data_In = 10'd0; 
	                                            
// --> end                                             
$display("Running testbench");                       
end                

reg isConfig_reg;
reg [3:0]state_idx_reg;

initial 
begin
	state_idx_reg <= 4'd0;
	isConfig_reg <= 1'b0;
	#600 	isConfig_reg <= 1'b1;
	//#80000  isConfig_reg <= 1'b1;

end


always @(posedge CLK)
begin
	case (state_idx_reg)
		4'd0:
			begin
				if (isConfig_reg)
					state_idx_reg <= state_idx_reg + 4'd1;
			end
		4'd1:
			begin
				isConfig_reg <= 1'b0;
				isConfig <= 1'b1;
				state_idx_reg <= state_idx_reg + 4'd1;
			end
		4'd2:
			begin
				isConfig <= 1'b0;
				Data_Config_In <= coef[0];
				state_idx_reg <= state_idx_reg + 4'd1;
			end
		4'd3:
			begin	
				Data_Config_In <= coef[1];
				state_idx_reg <= state_idx_reg + 4'd1;
			end
		4'd4:
			begin	
				Data_Config_In <= coef[2];
				state_idx_reg <= state_idx_reg + 4'd1;
			end
		4'd5:
			begin
				if (isConfig_reg)
					begin
						state_idx_reg <= state_idx_reg + 4'd1;
					end
			end
		4'd6:
			begin
				isConfig <= 1'b1;
				state_idx_reg <= state_idx_reg + 4'd1;
			end
		4'd7:
			begin
				isConfig <= 1'b0;
				Data_Config_In <= 16'b0000000000111111;
				state_idx_reg <= state_idx_reg + 4'd1;
			end
		4'd8:
			begin	
				Data_Config_In <= 16'd8;
				isConfig_reg <= 1'b0;
				state_idx_reg <= state_idx_reg + 4'd1;
			end
		4'd9:
			begin
				// NULL
			end
		default:
			begin
				// NULL
			end
	endcase
end

	
//// generate clk
always 
begin
	#clk_half_period CLK = ~CLK;
end

	
//// read test data from file;
integer Pattern;
reg signed [15:0] stimulus[1:data_num];

initial 
begin
	// file must be putted in dirï¼š $proc\simulation\modelsim\
	
	$readmemb("cicS_bin.txt", stimulus);
	Pattern = 0;
	
	#init_config_time;
	repeat(data_num)
		begin
			Pattern = Pattern + 1;
			Data_In = stimulus[Pattern];
			Data_In_Valid <= 1;
			#clk_half_period;
			Data_In_Valid <= 0;
			#clk_half_period;
			#clk_period;
		end
end

//// write output d_out to file: simDataOut.txt;
integer file_out;
initial 
begin
	//the file in the dir: proc\simulation\modelsim\
	
	file_out = $fopen("cicSimDataOut.txt");
	if(!file_out)
	begin
		$display("could not open ouput file!");
		$finish;
	end
end	

wire rst_write;
wire signed [OUTPUT_WIDTH-1:0] dout_s;

assign dout_s = Data_Out;
assign rst_write = CLK & (nRST);  // generate write clk, doesn't write in reset time;

always @(posedge rst_write)
	if (Data_Out_Valid)
		  $fdisplay(file_out, "%d", Data_Out); 
		  
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
                                                       
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
                                                       
@eachvec;                                              
// --> end                                             
end                                                    
endmodule

